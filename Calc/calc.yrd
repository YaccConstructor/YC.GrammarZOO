{
open QuickGraph.FSA.FsaApproximation
open QuickGraph.FSA.GraphBasedFsa
}

options {
    infEpsPath = epsilons
}

module Main

binExpr<operand binOp>:
#if rt
  l=operand r=(op=binOp r=operand { op,r })*
  {List.fold (fun l (op,r) -> op l r) l r }
#elif ca
operand (binOp operand)*
#endif;

[<Start>]
expr:
#if rt
 res=binExpr<term termOp> { res }
#elif ca
 binExpr<term termOp> | ERROR
#endif;

termOp:
#if rt
 PLUS { (+) } | MINUS { (-) }
#elif ca
 PLUS | MINUS
#endif;

term:
#if rt
 res=binExpr<factor factorOp> { res }
#elif ca
 binExpr<factor factorOp>| ERROR
#endif;

factorOp:
#if rt
 MULT { ( * ) } | DIV { (/) }
#elif ca
 MULT | DIV
#endif;

factor:
#if rt
 res=binExpr<powExpr powOp> { res }
#elif ca
 binExpr<powExpr powOp> | ERROR
#endif;

powOp:
#if rt
 POW { (fun x y -> (float x ** float y) |> int) }
#elif ca
 POW
#endif;

powExpr:
#if rt
 n=NUMBER { 1 } | LBRACE e=expr RBRACE { e }
#elif ca
 NUMBER | LBRACE expr RBRACE | ERROR
#endif;