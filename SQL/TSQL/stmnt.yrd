[<AllPublic>]
module Stmnt

open Select_crud, Set_stmnt, Execute_stmnt, Expr, MsCommon, Datatype, Create_table, Crud, Common, Transaction, Cycles_stmnt

proc_body_stmnt:
     select_stmnt
   | set_stmnt
   | execute_stmnt   
   | declare
   | 'RETURN' sql_expr
   | if_stmt
   | raiserror_stmnt
   | stmt_block
   | begin_transaction
   | commit_transaction
   | rollback_transaction
   | drop_procedure
   | while_stmt
   | create_table
   | insert
   | fetch_stmnt
   | print_stmt
 
declare:  
    'DECLARE' 
    comma_list<(
        LOCALVAR 'AS'? sql_datatype
      | ident 'CURSOR' 'LOCAL'? 'STATIC'? 'FOR'? sql_expr
      | ident 'AS'? table_type_definition
    )>
    ';'?

table_type_definition: 
     'TABLE' '(' (column_definition | table_constraint)* ')' 

column_definition:
    ident ('scalar_data_type' | 'AS' sql_expr)
    ['COLLATE' ident]
    ['DEFAULT' sql_expr | 'IDENTITY' [DEC_NUMBER ',' DEC_NUMBER]]
    'ROWGUIDCOL'? 
    column_constraint? 

column_constraint: 
  [
      ['NOT'] 'NULL'
    | 'PRIMARY' 'KEY'
    | 'UNIQUE'
    | 'CHECK' sql_expr 
  ]

table_constraint: 
    ('PRIMARY' 'KEY' | 'UNIQUE') '(' comma_list<ident> ')'
  | 'CHECK' '(' search_condition ')'   
	 
raiserror_stmnt:
    'RAISERROR' '(' (dec_num | STRING_CONST | LOCALVAR)
    (',' dec_num ',' dec_num)
    [',' comma_list<sql_expr>] ')'
    ['WITH' comma_list<('LOG' | 'NOWAIT' | 'SETERROR')>]
	
stmt_block: 'BEGIN' (proc_body_stmnt ';'?)* 'END'

drop_procedure: 'DROP' ('PROC' | 'PROCEDURE') (full_ident)+
  
print_stmt: 'PRINT' sql_expr ';'?

